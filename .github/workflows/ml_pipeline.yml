name: ML Pipeline with DVC

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  ml-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure Kaggle
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        if [ -n "$KAGGLE_USERNAME" ] && [ -n "$KAGGLE_KEY" ]; then
          mkdir -p ~/.kaggle
          echo '{"username":"'$KAGGLE_USERNAME'","key":"'$KAGGLE_KEY'"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          echo "‚úÖ Kaggle configured"
        else
          echo "‚ö†Ô∏è Kaggle credentials not found, using sample data"
        fi

    - name: Setup DVC
      run: |
        dvc --version
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

    # ‚úÖ PERBAIKAN: Clean up tracked files sebelum DVC
    - name: Clean up Git-tracked outputs
      run: |
        # Remove files yang akan dikelola DVC dari Git tracking
        git rm --cached -r training_results.json || true
        git rm --cached -r evaluation_results.json || true
        git rm --cached -r models/ || true
        git rm --cached -r data/processed/ || true
        git rm --cached -r *.png || true
        
        # Commit perubahan
        git add -A
        git commit -m "Remove DVC-managed files from Git tracking" || true
        
        echo "‚úÖ Cleaned up Git tracking"

    - name: Cache DVC
      uses: actions/cache@v3
      with:
        path: .dvc/cache
        key: ${{ runner.os }}-dvc-${{ hashFiles('**/dvc.lock') }}
        restore-keys: |
          ${{ runner.os }}-dvc-

    # ‚úÖ PERBAIKAN: Initialize DVC jika belum ada
    - name: Initialize DVC
      run: |
        if [ ! -d ".dvc" ]; then
          dvc init --no-scm
          echo "‚úÖ DVC initialized"
        else
          echo "‚úÖ DVC already initialized"
        fi

    # ‚úÖ PERBAIKAN: Run DVC dengan error handling
    - name: Run DVC Pipeline
      run: |
        echo "üöÄ Starting DVC pipeline..."
        dvc repro --force || {
          echo "‚ùå DVC pipeline failed, trying manual pipeline..."
          python run_pipeline.py
        }

    - name: Validate Pipeline Results
      run: |
        echo "üìä Checking pipeline results..."
        ls -la models/ || echo "models directory not found"
        ls -la data/processed/ || echo "processed data not found"
        
        python -c "
        import os
        required_files = [
          'data/processed/processed_data.csv',
          'training_results.json'
        ]
        missing_files = []
        for file in required_files:
          if os.path.exists(file):
            print(f'‚úÖ {file}')
          else:
            print(f'‚ùå {file}')
            missing_files.append(file)
        
        if missing_files:
          print(f'‚ö†Ô∏è Missing files: {missing_files}')
          print('Pipeline may have used fallback mode')
        else:
          print('‚úÖ All required files present')
        "

    - name: Upload ML Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ml-pipeline-results
        path: |
          models/
          data/processed/
          training_results.json
          evaluation_results.json
          *.png
          dvc.lock
        retention-days: 30